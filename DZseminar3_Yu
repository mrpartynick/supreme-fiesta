# Конспект

![лого](git-logo.png)

**Контроль версий** - практика, которая позволяет отслеживать изменения исходного кода и управлять ими.

**Контроль версий необходим, чтобы:**

* хранить разные версии проекта;
* возвращаться к разным версиям проекта.

***Примеры:** версии сайтов (по датам) и документов.*

Таким образом, **система контроля** — это реализованная возможность замены информации 
с использованием сохраненных версий.

## **Git - программа для контроля версий**

**Git** — самая популярная система контроля
версий, но не единственная. Алгоритм
работы подобных систем схож.

Обратите внимание: ***Git*** хранит ***не файлы целиком, а отличия между ними.***

## **Команды Git**
**git --version** - проверяем текущую установленную версию программы.

**git init** - указываем папку, в которой git начнет отслеживать изменения. В папке появится скрытая папка .git

**git status** - показывает текущее состояние гита, есть ли изменения которые нужно сохранить.

**git add** - добавляет содержимое рабочего каталога 
в индекс (staging area) для последующего коммита.

**git commit** - зафиксировать и сохранить. Пишем: *git commit -m "коммент"*

**git log** - журнал изменений.

**git checkout** - переключение между версиями.

**git checkout mastrer** - возврат в актуальную версию коммита.

*q - возвращает в исходное окно терминала.*

**git diff** - Показывает разницу между текущим файлом
и сохранённым.

## Синтаксис языка Markdown. 

 * Жирный текст — *
 * Курсивный текст — *
 * Зачеркнутый текст — ~
 * Выделяют заголовки — # в начале строки
 * Показать уровень заголовка —
подчеркивание знаками = или ****
 * Нумерованные Списки — обозначаются
обычными цифрами 1, 2, 3
 * Ненумерованные Списки — обозначаются
*знаками в начале строки
 * Вложенные Списки — выполняем отступы
 * цитаты выделяются - >

 [Заголовки на языке маркдаун в гитхаб.](https://gist.github.com/Jekins/2bf2d0638163f1294637)


## Работа с черновиками

**git branch** - показывает все созданные ветки и на которой находитесь.

**git branch <имя ветки>** - создать новую ветку.

**git checkout <имя ветки>** - переключиться с одной ветки на другую.

Команда **git log** покажет состояние более новых
версий проекта. Но если вызвать эту команду из
самой «свежей» ветки, мы не увидим исходного
файла.

**Команды для слияния веток**

**git merge <имя ветки для слияния с текущей>** - находясь в нужной ветке сольем с нужным черновиком (веткой).

**git branch -d <имя ветки>** - если ветка с черновиком больше не нужна, удаляем ее этой командой.

**Слияние с конфликтом**

Если произошел конфликт при слиянии веток, лучше в ручную изменить конфликтующие места и слить.

**git log --graph** -  позволяет отобразить коммиты в виде дерева.


## Работа с GitHub

**git clone <ссылка на репозиторий>** - копировать внешний репозиторий на свой ПК.

Команда **git clone** составная: она не только
загружает все изменения, но и пытается слить 
все ветки на локальном компьютере и в
удаленном репозитории.

**git push** - отправить свою версию репозитория во
внешний репозиторий. При первом её использовании нужна
авторизация.

**git pull** - Эта команда позволяет скачать все 
из текущего репозитория и автоматически
сделать merge с нашей версией.

### **Как настроить совместную работу:**

1. Создать аккаунт на GitHub.com
2. Создать локальный репозиторий
3. “Подружить” ваш локальный и удалённый репозитории. 
(GitHub при создании нового репозитория подскажет, как это можно сделать)
4. Отправить (push) ваш локальный репозиторий в удалённый (на GitHub), при этом, возможно, 
вам нужно будет авторизоваться на удалённом репозитории
5. Провести изменения “с другого компьютера”
6. Выкачать (pull) актуальное состояние из удалённого репозитория

**pull request** - 
* команда для предложения изменений
* запрос на вливание изменений в репозиторий

### **Как сделать pull request:**

1. Делаем   (ответвление) репозитория fork
2. Делаем git clone   версии репозитория СВОЕЙ
3. Создаем новую ветку и в НЕЕ вносим свои изменения
4. Фиксируем изменения (делаем коммиты)
5. Отправляем свою версию в свой GitHub
6. На сайте GitHub нажимаем кнопку pull request
   
   
